"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/dotprompt";
exports.ids = ["vendor-chunks/dotprompt"];
exports.modules = {

/***/ "(action-browser)/./node_modules/dotprompt/dist/index.js":
/*!**********************************************!*\
  !*** ./node_modules/dotprompt/dist/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/index.ts\nvar index_exports = {};\n__export(index_exports, {\n  Dotprompt: () => Dotprompt,\n  PicoschemaParser: () => PicoschemaParser,\n  picoschema: () => picoschema\n});\nmodule.exports = __toCommonJS(index_exports);\n\n// src/dotprompt.ts\nvar Handlebars = __toESM(__webpack_require__(/*! handlebars */ \"(action-browser)/./node_modules/handlebars/lib/index.js\"));\n\n// src/helpers.ts\nvar helpers_exports = {};\n__export(helpers_exports, {\n  history: () => history,\n  ifEquals: () => ifEquals,\n  json: () => json,\n  media: () => media,\n  role: () => role,\n  section: () => section,\n  unlessEquals: () => unlessEquals\n});\nvar import_handlebars = __webpack_require__(/*! handlebars */ \"(action-browser)/./node_modules/handlebars/lib/index.js\");\nfunction json(serializable, options) {\n  return new import_handlebars.SafeString(\n    JSON.stringify(serializable, null, options.hash.indent || 0)\n  );\n}\nfunction role(role2) {\n  return new import_handlebars.SafeString(`<<<dotprompt:role:${role2}>>>`);\n}\nfunction history() {\n  return new import_handlebars.SafeString(\"<<<dotprompt:history>>>\");\n}\nfunction section(name) {\n  return new import_handlebars.SafeString(`<<<dotprompt:section ${name}>>>`);\n}\nfunction media(options) {\n  return new import_handlebars.SafeString(\n    `<<<dotprompt:media:url ${options.hash.url}${options.hash.contentType ? ` ${options.hash.contentType}` : \"\"}>>>`\n  );\n}\nfunction ifEquals(arg1, arg2, options) {\n  return arg1 === arg2 ? options.fn(this) : options.inverse(this);\n}\nfunction unlessEquals(arg1, arg2, options) {\n  return arg1 !== arg2 ? options.fn(this) : options.inverse(this);\n}\n\n// src/parse.ts\nvar import_yaml = __webpack_require__(/*! yaml */ \"(action-browser)/./node_modules/yaml/dist/index.js\");\nvar ROLE_MARKER_PREFIX = \"<<<dotprompt:role:\";\nvar HISTORY_MARKER_PREFIX = \"<<<dotprompt:history\";\nvar MEDIA_MARKER_PREFIX = \"<<<dotprompt:media:\";\nvar SECTION_MARKER_PREFIX = \"<<<dotprompt:section\";\nvar FRONTMATTER_AND_BODY_REGEX = /^---\\s*\\n([\\s\\S]*?)\\n---\\s*\\n([\\s\\S]*)$/;\nvar ROLE_AND_HISTORY_MARKER_REGEX = /(<<<dotprompt:(?:role:[a-z]+|history))>>>/g;\nvar MEDIA_AND_SECTION_MARKER_REGEX = /(<<<dotprompt:(?:media:url|section).*?)>>>/g;\nvar RESERVED_METADATA_KEYWORDS = [\n  // NOTE: KEEP SORTED\n  \"config\",\n  \"description\",\n  \"ext\",\n  \"input\",\n  \"model\",\n  \"name\",\n  \"output\",\n  \"raw\",\n  \"toolDefs\",\n  \"tools\",\n  \"variant\",\n  \"version\"\n];\nvar BASE_METADATA = {\n  ext: {},\n  metadata: {},\n  config: {}\n};\nfunction splitByRegex(source, regex) {\n  return source.split(regex).filter((s) => s.trim() !== \"\");\n}\nfunction splitByRoleAndHistoryMarkers(renderedString) {\n  return splitByRegex(renderedString, ROLE_AND_HISTORY_MARKER_REGEX);\n}\nfunction splitByMediaAndSectionMarkers(source) {\n  return splitByRegex(source, MEDIA_AND_SECTION_MARKER_REGEX);\n}\nfunction convertNamespacedEntryToNestedObject(key, value, obj = {}) {\n  const result = obj || {};\n  const lastDotIndex = key.lastIndexOf(\".\");\n  const ns = key.substring(0, lastDotIndex);\n  const field = key.substring(lastDotIndex + 1);\n  result[ns] = result[ns] || {};\n  result[ns][field] = value;\n  return result;\n}\nfunction extractFrontmatterAndBody(source) {\n  const match = source.match(FRONTMATTER_AND_BODY_REGEX);\n  if (match) {\n    const [, frontmatter, body] = match;\n    return { frontmatter, body };\n  }\n  return { frontmatter: \"\", body: \"\" };\n}\nfunction parseDocument(source) {\n  const { frontmatter, body } = extractFrontmatterAndBody(source);\n  if (frontmatter) {\n    try {\n      const parsedMetadata = (0, import_yaml.parse)(frontmatter);\n      const raw = { ...parsedMetadata };\n      const pruned = { ...BASE_METADATA };\n      const ext = {};\n      for (const k in raw) {\n        const key = k;\n        if (RESERVED_METADATA_KEYWORDS.includes(key)) {\n          pruned[key] = raw[key];\n        } else if (key.includes(\".\")) {\n          convertNamespacedEntryToNestedObject(key, raw[key], ext);\n        }\n      }\n      return { ...pruned, raw, ext, template: body.trim() };\n    } catch (error) {\n      console.error(\"Dotprompt: Error parsing YAML frontmatter:\", error);\n      return { ...BASE_METADATA, template: source.trim() };\n    }\n  }\n  return { ...BASE_METADATA, template: source };\n}\nfunction messageSourcesToMessages(messageSources) {\n  return messageSources.filter((ms) => ms.content || ms.source).map((m) => {\n    const out = {\n      role: m.role,\n      content: m.content || toParts(m.source || \"\")\n    };\n    if (m.metadata) {\n      out.metadata = m.metadata;\n    }\n    return out;\n  });\n}\nfunction transformMessagesToHistory(messages) {\n  return messages.map((m) => ({\n    ...m,\n    metadata: { ...m.metadata, purpose: \"history\" }\n  }));\n}\nfunction toMessages(renderedString, data) {\n  let currentMessage = { role: \"user\", source: \"\" };\n  const messageSources = [currentMessage];\n  for (const piece of splitByRoleAndHistoryMarkers(renderedString)) {\n    if (piece.startsWith(ROLE_MARKER_PREFIX)) {\n      const role2 = piece.substring(ROLE_MARKER_PREFIX.length);\n      if (currentMessage.source?.trim()) {\n        currentMessage = { role: role2, source: \"\" };\n        messageSources.push(currentMessage);\n      } else {\n        currentMessage.role = role2;\n      }\n    } else if (piece.startsWith(HISTORY_MARKER_PREFIX)) {\n      const historyMessages = transformMessagesToHistory(data?.messages ?? []);\n      if (historyMessages) {\n        messageSources.push(...historyMessages);\n      }\n      currentMessage = { role: \"model\", source: \"\" };\n      messageSources.push(currentMessage);\n    } else {\n      currentMessage.source += piece;\n    }\n  }\n  const messages = messageSourcesToMessages(messageSources);\n  return insertHistory(messages, data?.messages);\n}\nfunction messagesHaveHistory(messages) {\n  return messages.some((m) => m.metadata?.purpose === \"history\");\n}\nfunction insertHistory(messages, history2 = []) {\n  if (!history2 || messagesHaveHistory(messages)) {\n    return messages;\n  }\n  if (messages.length === 0) {\n    return history2;\n  }\n  const lastMessage = messages.at(-1);\n  if (lastMessage?.role === \"user\") {\n    const messagesWithoutLast = messages.slice(0, -1);\n    return [...messagesWithoutLast, ...history2, lastMessage];\n  }\n  return [...messages, ...history2];\n}\nfunction toParts(source) {\n  return splitByMediaAndSectionMarkers(source).map(parsePart);\n}\nfunction parsePart(piece) {\n  if (piece.startsWith(MEDIA_MARKER_PREFIX)) {\n    return parseMediaPart(piece);\n  } else if (piece.startsWith(SECTION_MARKER_PREFIX)) {\n    return parseSectionPart(piece);\n  }\n  return parseTextPart(piece);\n}\nfunction parseMediaPart(piece) {\n  if (!piece.startsWith(MEDIA_MARKER_PREFIX)) {\n    throw new Error(\"Invalid media piece\");\n  }\n  const [_, url, contentType] = piece.split(\" \");\n  const part = { media: { url } };\n  if (contentType) {\n    part.media.contentType = contentType;\n  }\n  return part;\n}\nfunction parseSectionPart(piece) {\n  if (!piece.startsWith(SECTION_MARKER_PREFIX)) {\n    throw new Error(\"Invalid section piece\");\n  }\n  const [_, sectionType] = piece.split(\" \");\n  return { metadata: { purpose: sectionType, pending: true } };\n}\nfunction parseTextPart(piece) {\n  return { text: piece };\n}\n\n// src/picoschema.ts\nvar JSON_SCHEMA_SCALAR_TYPES = [\n  \"string\",\n  \"boolean\",\n  \"null\",\n  \"number\",\n  \"integer\",\n  \"any\"\n];\nvar WILDCARD_PROPERTY_NAME = \"(*)\";\nasync function picoschema(schema, options) {\n  return new PicoschemaParser(options).parse(schema);\n}\nvar PicoschemaParser = class {\n  schemaResolver;\n  constructor(options) {\n    this.schemaResolver = options?.schemaResolver;\n  }\n  async mustResolveSchema(schemaName) {\n    if (!this.schemaResolver) {\n      throw new Error(`Picoschema: unsupported scalar type '${schemaName}'.`);\n    }\n    const val = await this.schemaResolver(schemaName);\n    if (!val) {\n      throw new Error(\n        `Picoschema: could not find schema with name '${schemaName}'`\n      );\n    }\n    return val;\n  }\n  async parse(schema) {\n    if (!schema) return null;\n    if (typeof schema === \"string\") {\n      const [type, description] = extractDescription(schema);\n      if (JSON_SCHEMA_SCALAR_TYPES.includes(type)) {\n        let out = { type };\n        if (description) out = { ...out, description };\n        return out;\n      }\n      const resolvedSchema = await this.mustResolveSchema(type);\n      return description ? { ...resolvedSchema, description } : resolvedSchema;\n    }\n    if ([...JSON_SCHEMA_SCALAR_TYPES, \"object\", \"array\"].includes(\n      schema?.type\n    )) {\n      return schema;\n    }\n    if (typeof schema?.properties === \"object\") {\n      return { ...schema, type: \"object\" };\n    }\n    return this.parsePico(schema);\n  }\n  async parsePico(obj, path = []) {\n    if (typeof obj === \"string\") {\n      const [type, description] = extractDescription(obj);\n      if (!JSON_SCHEMA_SCALAR_TYPES.includes(type)) {\n        let resolvedSchema = await this.mustResolveSchema(type);\n        if (description) resolvedSchema = { ...resolvedSchema, description };\n        return resolvedSchema;\n      }\n      if (type === \"any\") {\n        return description ? { description } : {};\n      }\n      return description ? { type, description } : { type };\n    } else if (typeof obj !== \"object\") {\n      throw new Error(\n        \"Picoschema: only consists of objects and strings. Got: \" + JSON.stringify(obj)\n      );\n    }\n    const schema = {\n      type: \"object\",\n      properties: {},\n      required: [],\n      additionalProperties: false\n    };\n    for (const key in obj) {\n      if (key === WILDCARD_PROPERTY_NAME) {\n        schema.additionalProperties = await this.parsePico(obj[key], [\n          ...path,\n          key\n        ]);\n        continue;\n      }\n      const [name, typeInfo] = key.split(\"(\");\n      const isOptional = name.endsWith(\"?\");\n      const propertyName = isOptional ? name.slice(0, -1) : name;\n      if (!isOptional) {\n        schema.required.push(propertyName);\n      }\n      if (!typeInfo) {\n        const prop = { ...await this.parsePico(obj[key], [...path, key]) };\n        if (isOptional && typeof prop.type === \"string\") {\n          prop.type = [prop.type, \"null\"];\n        }\n        schema.properties[propertyName] = prop;\n        continue;\n      }\n      const [type, description] = extractDescription(\n        typeInfo.substring(0, typeInfo.length - 1)\n      );\n      if (type === \"array\") {\n        schema.properties[propertyName] = {\n          type: isOptional ? [\"array\", \"null\"] : \"array\",\n          items: await this.parsePico(obj[key], [...path, key])\n        };\n      } else if (type === \"object\") {\n        const prop = await this.parsePico(obj[key], [...path, key]);\n        if (isOptional) prop.type = [prop.type, \"null\"];\n        schema.properties[propertyName] = prop;\n      } else if (type === \"enum\") {\n        const prop = { enum: obj[key] };\n        if (isOptional && !prop.enum.includes(null)) prop.enum.push(null);\n        schema.properties[propertyName] = prop;\n      } else {\n        throw new Error(\n          \"Picoschema: parenthetical types must be 'object' or 'array', got: \" + type\n        );\n      }\n      if (description) {\n        schema.properties[propertyName].description = description;\n      }\n    }\n    if (!schema.required.length) delete schema.required;\n    return schema;\n  }\n};\nfunction extractDescription(input) {\n  if (!input.includes(\",\")) return [input, null];\n  const match = input.match(/(.*?), *(.*)$/);\n  return [match[1], match[2]];\n}\n\n// src/util.ts\nfunction removeUndefinedFields(obj) {\n  if (obj === null || typeof obj !== \"object\") {\n    return obj;\n  }\n  if (Array.isArray(obj)) {\n    return obj.map((item) => removeUndefinedFields(item));\n  }\n  const result = {};\n  for (const [key, value] of Object.entries(obj)) {\n    if (value !== void 0) {\n      result[key] = removeUndefinedFields(value);\n    }\n  }\n  return result;\n}\n\n// src/dotprompt.ts\nvar Dotprompt = class {\n  handlebars;\n  knownHelpers = {};\n  defaultModel;\n  modelConfigs = {};\n  tools = {};\n  toolResolver;\n  schemas = {};\n  schemaResolver;\n  partialResolver;\n  store;\n  constructor(options) {\n    this.handlebars = Handlebars.noConflict();\n    this.modelConfigs = options?.modelConfigs || this.modelConfigs;\n    this.defaultModel = options?.defaultModel;\n    this.tools = options?.tools || {};\n    this.toolResolver = options?.toolResolver;\n    this.schemas = options?.schemas || {};\n    this.schemaResolver = options?.schemaResolver;\n    this.partialResolver = options?.partialResolver;\n    for (const key in helpers_exports) {\n      this.defineHelper(key, helpers_exports[key]);\n      this.handlebars.registerHelper(key, helpers_exports[key]);\n    }\n    if (options?.helpers) {\n      for (const key in options.helpers) {\n        this.defineHelper(key, options.helpers[key]);\n      }\n    }\n    if (options?.partials) {\n      for (const key in options.partials) {\n        this.definePartial(key, options.partials[key]);\n      }\n    }\n  }\n  /**\n   * Registers a helper function for use in templates.\n   *\n   * @param name The name of the helper function to register\n   * @param fn The helper function implementation\n   * @return This instance for method chaining\n   */\n  defineHelper(name, fn) {\n    this.handlebars.registerHelper(name, fn);\n    this.knownHelpers[name] = true;\n    return this;\n  }\n  /**\n   * Registers a partial template for use in other templates.\n   *\n   * @param name The name of the partial to register\n   * @param source The template source for the partial\n   * @return This instance for method chaining\n   */\n  definePartial(name, source) {\n    this.handlebars.registerPartial(name, source);\n    return this;\n  }\n  /**\n   * Registers a tool definition for use in prompts.\n   *\n   * @param def The tool definition to register\n   * @return This instance for method chaining\n   */\n  defineTool(def) {\n    this.tools[def.name] = def;\n    return this;\n  }\n  /**\n   * Parses a prompt template string into a structured ParsedPrompt object.\n   *\n   * @param source The template source string to parse\n   * @return A parsed prompt object with extracted metadata and template\n   */\n  parse(source) {\n    return parseDocument(source);\n  }\n  /**\n   * Renders a prompt template with the provided data.\n   *\n   * @param source The template source string to render\n   * @param data The data to use when rendering the template\n   * @param options Additional metadata and options for rendering\n   * @return A promise resolving to the rendered prompt\n   */\n  async render(source, data = {}, options) {\n    const renderer = await this.compile(source);\n    return renderer(data, options);\n  }\n  /**\n   * Processes schema definitions in picoschema format into standard JSON Schema.\n   *\n   * @param meta The prompt metadata containing schema definitions\n   * @return A promise resolving to the processed metadata with expanded schemas\n   */\n  async renderPicoschema(meta) {\n    if (!meta.output?.schema && !meta.input?.schema) {\n      return meta;\n    }\n    const newMeta = { ...meta };\n    if (meta.input?.schema) {\n      newMeta.input = {\n        ...meta.input,\n        schema: await picoschema(meta.input.schema, {\n          schemaResolver: this.wrappedSchemaResolver.bind(this)\n        })\n      };\n    }\n    if (meta.output?.schema) {\n      newMeta.output = {\n        ...meta.output,\n        schema: await picoschema(meta.output.schema, {\n          schemaResolver: this.wrappedSchemaResolver.bind(this)\n        })\n      };\n    }\n    return newMeta;\n  }\n  /**\n   * Resolves a schema name to its definition, using registered schemas or schema resolver.\n   *\n   * @param name The name of the schema to resolve\n   * @return A promise resolving to the schema definition or null if not found\n   */\n  async wrappedSchemaResolver(name) {\n    if (this.schemas[name]) {\n      return this.schemas[name];\n    }\n    if (this.schemaResolver) {\n      return await this.schemaResolver(name);\n    }\n    return null;\n  }\n  /**\n   * Merges multiple metadata objects together, resolving tools and schemas.\n   *\n   * @param base The base metadata object\n   * @param merges Additional metadata objects to merge into the base\n   * @return A promise resolving to the merged and processed metadata\n   */\n  async resolveMetadata(base, ...merges) {\n    let out = { ...base };\n    for (let i = 0; i < merges.length; i++) {\n      if (!merges[i]) continue;\n      const config = out.config || {};\n      out = { ...out, ...merges[i] };\n      out.config = { ...config, ...merges[i]?.config || {} };\n    }\n    const { template: _, ...outWithoutTemplate } = out;\n    out = outWithoutTemplate;\n    out = removeUndefinedFields(out);\n    out = await this.resolveTools(out);\n    out = await this.renderPicoschema(out);\n    return out;\n  }\n  /**\n   * Resolves tool names to their definitions using registered tools or tool resolver.\n   *\n   * @param base The metadata containing tool references to resolve\n   * @return A promise resolving to metadata with resolved tool definitions\n   */\n  async resolveTools(base) {\n    const out = { ...base };\n    if (out.tools) {\n      const outTools = [];\n      out.toolDefs = out.toolDefs || [];\n      await Promise.all(\n        out.tools.map(async (toolName) => {\n          if (this.tools[toolName]) {\n            if (out.toolDefs) {\n              out.toolDefs.push(this.tools[toolName]);\n            }\n          } else if (this.toolResolver) {\n            const resolvedTool = await this.toolResolver(toolName);\n            if (!resolvedTool) {\n              throw new Error(\n                `Dotprompt: Unable to resolve tool '${toolName}' to a recognized tool definition.`\n              );\n            }\n            if (out.toolDefs) {\n              out.toolDefs.push(resolvedTool);\n            }\n          } else {\n            outTools.push(toolName);\n          }\n        })\n      );\n      out.tools = outTools;\n    }\n    return out;\n  }\n  /**\n   * Identifies all partial references in a template.\n   *\n   * @param template The template to scan for partial references\n   * @return A set of partial names referenced in the template\n   */\n  identifyPartials(template) {\n    const ast = this.handlebars.parse(template);\n    const partials = /* @__PURE__ */ new Set();\n    const visitor = new class extends this.handlebars.Visitor {\n      // Visit partial statements and add their names to our set.\n      PartialStatement(partial) {\n        if (partial && typeof partial === \"object\" && \"name\" in partial && partial.name && typeof partial.name === \"object\" && \"original\" in partial.name && typeof partial.name.original === \"string\") {\n          partials.add(partial.name.original);\n        }\n      }\n    }();\n    visitor.accept(ast);\n    return partials;\n  }\n  /**\n   * Resolves and registers all partials referenced in a template.\n   *\n   * @param template The template containing partial references\n   * @return A promise that resolves when all partials are registered\n   */\n  async resolvePartials(template) {\n    if (!this.partialResolver && !this.store) {\n      return;\n    }\n    const partials = this.identifyPartials(template);\n    await Promise.all(\n      Array.from(partials).map(async (name) => {\n        if (!this.handlebars.partials[name]) {\n          let content = null;\n          if (this.partialResolver) {\n            content = await this.partialResolver(name);\n          }\n          if (!content && this.store) {\n            const partial = await this.store.loadPartial(name);\n            content = partial?.source;\n          }\n          if (content) {\n            this.definePartial(name, content);\n            await this.resolvePartials(content);\n          }\n        }\n      })\n    );\n  }\n  /**\n   * Compiles a template into a reusable function for rendering prompts.\n   *\n   * @param source The template source or parsed prompt to compile\n   * @param additionalMetadata Additional metadata to include in the compiled template\n   * @return A promise resolving to a function for rendering the template\n   */\n  async compile(source, additionalMetadata) {\n    let parsedSource;\n    if (typeof source === \"string\") {\n      parsedSource = this.parse(source);\n    } else {\n      parsedSource = source;\n    }\n    if (additionalMetadata) {\n      parsedSource = { ...parsedSource, ...additionalMetadata };\n    }\n    await this.resolvePartials(parsedSource.template);\n    const renderString = this.handlebars.compile(\n      parsedSource.template,\n      {\n        knownHelpers: this.knownHelpers,\n        knownHelpersOnly: true,\n        noEscape: true\n      }\n    );\n    const renderFunc = async (data, options) => {\n      const { input, ...mergedMetadata } = await this.renderMetadata(parsedSource);\n      const renderedString = renderString(\n        { ...options?.input?.default || {}, ...data.input },\n        {\n          data: {\n            metadata: {\n              prompt: mergedMetadata,\n              docs: data.docs,\n              messages: data.messages\n            },\n            ...data.context || {}\n          }\n        }\n      );\n      return {\n        ...mergedMetadata,\n        messages: toMessages(renderedString, data)\n      };\n    };\n    renderFunc.prompt = parsedSource;\n    return renderFunc;\n  }\n  /**\n   * Processes and resolves all metadata for a prompt template.\n   *\n   * @param source The template source or parsed prompt\n   * @param additionalMetadata Additional metadata to include\n   * @return A promise resolving to the fully processed metadata\n   */\n  async renderMetadata(source, additionalMetadata) {\n    let parsedSource;\n    if (typeof source === \"string\") {\n      parsedSource = this.parse(source);\n    } else {\n      parsedSource = source;\n    }\n    const selectedModel = additionalMetadata?.model || parsedSource.model || this.defaultModel;\n    let modelConfig;\n    if (selectedModel && this.modelConfigs[selectedModel]) {\n      modelConfig = this.modelConfigs[selectedModel];\n    }\n    return this.resolveMetadata(\n      modelConfig ? { config: modelConfig } : {},\n      parsedSource,\n      additionalMetadata\n    );\n  }\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/dotprompt/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/dotprompt/dist/index.js":
/*!**********************************************!*\
  !*** ./node_modules/dotprompt/dist/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/index.ts\nvar index_exports = {};\n__export(index_exports, {\n  Dotprompt: () => Dotprompt,\n  PicoschemaParser: () => PicoschemaParser,\n  picoschema: () => picoschema\n});\nmodule.exports = __toCommonJS(index_exports);\n\n// src/dotprompt.ts\nvar Handlebars = __toESM(__webpack_require__(/*! handlebars */ \"(rsc)/./node_modules/handlebars/lib/index.js\"));\n\n// src/helpers.ts\nvar helpers_exports = {};\n__export(helpers_exports, {\n  history: () => history,\n  ifEquals: () => ifEquals,\n  json: () => json,\n  media: () => media,\n  role: () => role,\n  section: () => section,\n  unlessEquals: () => unlessEquals\n});\nvar import_handlebars = __webpack_require__(/*! handlebars */ \"(rsc)/./node_modules/handlebars/lib/index.js\");\nfunction json(serializable, options) {\n  return new import_handlebars.SafeString(\n    JSON.stringify(serializable, null, options.hash.indent || 0)\n  );\n}\nfunction role(role2) {\n  return new import_handlebars.SafeString(`<<<dotprompt:role:${role2}>>>`);\n}\nfunction history() {\n  return new import_handlebars.SafeString(\"<<<dotprompt:history>>>\");\n}\nfunction section(name) {\n  return new import_handlebars.SafeString(`<<<dotprompt:section ${name}>>>`);\n}\nfunction media(options) {\n  return new import_handlebars.SafeString(\n    `<<<dotprompt:media:url ${options.hash.url}${options.hash.contentType ? ` ${options.hash.contentType}` : \"\"}>>>`\n  );\n}\nfunction ifEquals(arg1, arg2, options) {\n  return arg1 === arg2 ? options.fn(this) : options.inverse(this);\n}\nfunction unlessEquals(arg1, arg2, options) {\n  return arg1 !== arg2 ? options.fn(this) : options.inverse(this);\n}\n\n// src/parse.ts\nvar import_yaml = __webpack_require__(/*! yaml */ \"(rsc)/./node_modules/yaml/dist/index.js\");\nvar ROLE_MARKER_PREFIX = \"<<<dotprompt:role:\";\nvar HISTORY_MARKER_PREFIX = \"<<<dotprompt:history\";\nvar MEDIA_MARKER_PREFIX = \"<<<dotprompt:media:\";\nvar SECTION_MARKER_PREFIX = \"<<<dotprompt:section\";\nvar FRONTMATTER_AND_BODY_REGEX = /^---\\s*\\n([\\s\\S]*?)\\n---\\s*\\n([\\s\\S]*)$/;\nvar ROLE_AND_HISTORY_MARKER_REGEX = /(<<<dotprompt:(?:role:[a-z]+|history))>>>/g;\nvar MEDIA_AND_SECTION_MARKER_REGEX = /(<<<dotprompt:(?:media:url|section).*?)>>>/g;\nvar RESERVED_METADATA_KEYWORDS = [\n  // NOTE: KEEP SORTED\n  \"config\",\n  \"description\",\n  \"ext\",\n  \"input\",\n  \"model\",\n  \"name\",\n  \"output\",\n  \"raw\",\n  \"toolDefs\",\n  \"tools\",\n  \"variant\",\n  \"version\"\n];\nvar BASE_METADATA = {\n  ext: {},\n  metadata: {},\n  config: {}\n};\nfunction splitByRegex(source, regex) {\n  return source.split(regex).filter((s) => s.trim() !== \"\");\n}\nfunction splitByRoleAndHistoryMarkers(renderedString) {\n  return splitByRegex(renderedString, ROLE_AND_HISTORY_MARKER_REGEX);\n}\nfunction splitByMediaAndSectionMarkers(source) {\n  return splitByRegex(source, MEDIA_AND_SECTION_MARKER_REGEX);\n}\nfunction convertNamespacedEntryToNestedObject(key, value, obj = {}) {\n  const result = obj || {};\n  const lastDotIndex = key.lastIndexOf(\".\");\n  const ns = key.substring(0, lastDotIndex);\n  const field = key.substring(lastDotIndex + 1);\n  result[ns] = result[ns] || {};\n  result[ns][field] = value;\n  return result;\n}\nfunction extractFrontmatterAndBody(source) {\n  const match = source.match(FRONTMATTER_AND_BODY_REGEX);\n  if (match) {\n    const [, frontmatter, body] = match;\n    return { frontmatter, body };\n  }\n  return { frontmatter: \"\", body: \"\" };\n}\nfunction parseDocument(source) {\n  const { frontmatter, body } = extractFrontmatterAndBody(source);\n  if (frontmatter) {\n    try {\n      const parsedMetadata = (0, import_yaml.parse)(frontmatter);\n      const raw = { ...parsedMetadata };\n      const pruned = { ...BASE_METADATA };\n      const ext = {};\n      for (const k in raw) {\n        const key = k;\n        if (RESERVED_METADATA_KEYWORDS.includes(key)) {\n          pruned[key] = raw[key];\n        } else if (key.includes(\".\")) {\n          convertNamespacedEntryToNestedObject(key, raw[key], ext);\n        }\n      }\n      return { ...pruned, raw, ext, template: body.trim() };\n    } catch (error) {\n      console.error(\"Dotprompt: Error parsing YAML frontmatter:\", error);\n      return { ...BASE_METADATA, template: source.trim() };\n    }\n  }\n  return { ...BASE_METADATA, template: source };\n}\nfunction messageSourcesToMessages(messageSources) {\n  return messageSources.filter((ms) => ms.content || ms.source).map((m) => {\n    const out = {\n      role: m.role,\n      content: m.content || toParts(m.source || \"\")\n    };\n    if (m.metadata) {\n      out.metadata = m.metadata;\n    }\n    return out;\n  });\n}\nfunction transformMessagesToHistory(messages) {\n  return messages.map((m) => ({\n    ...m,\n    metadata: { ...m.metadata, purpose: \"history\" }\n  }));\n}\nfunction toMessages(renderedString, data) {\n  let currentMessage = { role: \"user\", source: \"\" };\n  const messageSources = [currentMessage];\n  for (const piece of splitByRoleAndHistoryMarkers(renderedString)) {\n    if (piece.startsWith(ROLE_MARKER_PREFIX)) {\n      const role2 = piece.substring(ROLE_MARKER_PREFIX.length);\n      if (currentMessage.source?.trim()) {\n        currentMessage = { role: role2, source: \"\" };\n        messageSources.push(currentMessage);\n      } else {\n        currentMessage.role = role2;\n      }\n    } else if (piece.startsWith(HISTORY_MARKER_PREFIX)) {\n      const historyMessages = transformMessagesToHistory(data?.messages ?? []);\n      if (historyMessages) {\n        messageSources.push(...historyMessages);\n      }\n      currentMessage = { role: \"model\", source: \"\" };\n      messageSources.push(currentMessage);\n    } else {\n      currentMessage.source += piece;\n    }\n  }\n  const messages = messageSourcesToMessages(messageSources);\n  return insertHistory(messages, data?.messages);\n}\nfunction messagesHaveHistory(messages) {\n  return messages.some((m) => m.metadata?.purpose === \"history\");\n}\nfunction insertHistory(messages, history2 = []) {\n  if (!history2 || messagesHaveHistory(messages)) {\n    return messages;\n  }\n  if (messages.length === 0) {\n    return history2;\n  }\n  const lastMessage = messages.at(-1);\n  if (lastMessage?.role === \"user\") {\n    const messagesWithoutLast = messages.slice(0, -1);\n    return [...messagesWithoutLast, ...history2, lastMessage];\n  }\n  return [...messages, ...history2];\n}\nfunction toParts(source) {\n  return splitByMediaAndSectionMarkers(source).map(parsePart);\n}\nfunction parsePart(piece) {\n  if (piece.startsWith(MEDIA_MARKER_PREFIX)) {\n    return parseMediaPart(piece);\n  } else if (piece.startsWith(SECTION_MARKER_PREFIX)) {\n    return parseSectionPart(piece);\n  }\n  return parseTextPart(piece);\n}\nfunction parseMediaPart(piece) {\n  if (!piece.startsWith(MEDIA_MARKER_PREFIX)) {\n    throw new Error(\"Invalid media piece\");\n  }\n  const [_, url, contentType] = piece.split(\" \");\n  const part = { media: { url } };\n  if (contentType) {\n    part.media.contentType = contentType;\n  }\n  return part;\n}\nfunction parseSectionPart(piece) {\n  if (!piece.startsWith(SECTION_MARKER_PREFIX)) {\n    throw new Error(\"Invalid section piece\");\n  }\n  const [_, sectionType] = piece.split(\" \");\n  return { metadata: { purpose: sectionType, pending: true } };\n}\nfunction parseTextPart(piece) {\n  return { text: piece };\n}\n\n// src/picoschema.ts\nvar JSON_SCHEMA_SCALAR_TYPES = [\n  \"string\",\n  \"boolean\",\n  \"null\",\n  \"number\",\n  \"integer\",\n  \"any\"\n];\nvar WILDCARD_PROPERTY_NAME = \"(*)\";\nasync function picoschema(schema, options) {\n  return new PicoschemaParser(options).parse(schema);\n}\nvar PicoschemaParser = class {\n  schemaResolver;\n  constructor(options) {\n    this.schemaResolver = options?.schemaResolver;\n  }\n  async mustResolveSchema(schemaName) {\n    if (!this.schemaResolver) {\n      throw new Error(`Picoschema: unsupported scalar type '${schemaName}'.`);\n    }\n    const val = await this.schemaResolver(schemaName);\n    if (!val) {\n      throw new Error(\n        `Picoschema: could not find schema with name '${schemaName}'`\n      );\n    }\n    return val;\n  }\n  async parse(schema) {\n    if (!schema) return null;\n    if (typeof schema === \"string\") {\n      const [type, description] = extractDescription(schema);\n      if (JSON_SCHEMA_SCALAR_TYPES.includes(type)) {\n        let out = { type };\n        if (description) out = { ...out, description };\n        return out;\n      }\n      const resolvedSchema = await this.mustResolveSchema(type);\n      return description ? { ...resolvedSchema, description } : resolvedSchema;\n    }\n    if ([...JSON_SCHEMA_SCALAR_TYPES, \"object\", \"array\"].includes(\n      schema?.type\n    )) {\n      return schema;\n    }\n    if (typeof schema?.properties === \"object\") {\n      return { ...schema, type: \"object\" };\n    }\n    return this.parsePico(schema);\n  }\n  async parsePico(obj, path = []) {\n    if (typeof obj === \"string\") {\n      const [type, description] = extractDescription(obj);\n      if (!JSON_SCHEMA_SCALAR_TYPES.includes(type)) {\n        let resolvedSchema = await this.mustResolveSchema(type);\n        if (description) resolvedSchema = { ...resolvedSchema, description };\n        return resolvedSchema;\n      }\n      if (type === \"any\") {\n        return description ? { description } : {};\n      }\n      return description ? { type, description } : { type };\n    } else if (typeof obj !== \"object\") {\n      throw new Error(\n        \"Picoschema: only consists of objects and strings. Got: \" + JSON.stringify(obj)\n      );\n    }\n    const schema = {\n      type: \"object\",\n      properties: {},\n      required: [],\n      additionalProperties: false\n    };\n    for (const key in obj) {\n      if (key === WILDCARD_PROPERTY_NAME) {\n        schema.additionalProperties = await this.parsePico(obj[key], [\n          ...path,\n          key\n        ]);\n        continue;\n      }\n      const [name, typeInfo] = key.split(\"(\");\n      const isOptional = name.endsWith(\"?\");\n      const propertyName = isOptional ? name.slice(0, -1) : name;\n      if (!isOptional) {\n        schema.required.push(propertyName);\n      }\n      if (!typeInfo) {\n        const prop = { ...await this.parsePico(obj[key], [...path, key]) };\n        if (isOptional && typeof prop.type === \"string\") {\n          prop.type = [prop.type, \"null\"];\n        }\n        schema.properties[propertyName] = prop;\n        continue;\n      }\n      const [type, description] = extractDescription(\n        typeInfo.substring(0, typeInfo.length - 1)\n      );\n      if (type === \"array\") {\n        schema.properties[propertyName] = {\n          type: isOptional ? [\"array\", \"null\"] : \"array\",\n          items: await this.parsePico(obj[key], [...path, key])\n        };\n      } else if (type === \"object\") {\n        const prop = await this.parsePico(obj[key], [...path, key]);\n        if (isOptional) prop.type = [prop.type, \"null\"];\n        schema.properties[propertyName] = prop;\n      } else if (type === \"enum\") {\n        const prop = { enum: obj[key] };\n        if (isOptional && !prop.enum.includes(null)) prop.enum.push(null);\n        schema.properties[propertyName] = prop;\n      } else {\n        throw new Error(\n          \"Picoschema: parenthetical types must be 'object' or 'array', got: \" + type\n        );\n      }\n      if (description) {\n        schema.properties[propertyName].description = description;\n      }\n    }\n    if (!schema.required.length) delete schema.required;\n    return schema;\n  }\n};\nfunction extractDescription(input) {\n  if (!input.includes(\",\")) return [input, null];\n  const match = input.match(/(.*?), *(.*)$/);\n  return [match[1], match[2]];\n}\n\n// src/util.ts\nfunction removeUndefinedFields(obj) {\n  if (obj === null || typeof obj !== \"object\") {\n    return obj;\n  }\n  if (Array.isArray(obj)) {\n    return obj.map((item) => removeUndefinedFields(item));\n  }\n  const result = {};\n  for (const [key, value] of Object.entries(obj)) {\n    if (value !== void 0) {\n      result[key] = removeUndefinedFields(value);\n    }\n  }\n  return result;\n}\n\n// src/dotprompt.ts\nvar Dotprompt = class {\n  handlebars;\n  knownHelpers = {};\n  defaultModel;\n  modelConfigs = {};\n  tools = {};\n  toolResolver;\n  schemas = {};\n  schemaResolver;\n  partialResolver;\n  store;\n  constructor(options) {\n    this.handlebars = Handlebars.noConflict();\n    this.modelConfigs = options?.modelConfigs || this.modelConfigs;\n    this.defaultModel = options?.defaultModel;\n    this.tools = options?.tools || {};\n    this.toolResolver = options?.toolResolver;\n    this.schemas = options?.schemas || {};\n    this.schemaResolver = options?.schemaResolver;\n    this.partialResolver = options?.partialResolver;\n    for (const key in helpers_exports) {\n      this.defineHelper(key, helpers_exports[key]);\n      this.handlebars.registerHelper(key, helpers_exports[key]);\n    }\n    if (options?.helpers) {\n      for (const key in options.helpers) {\n        this.defineHelper(key, options.helpers[key]);\n      }\n    }\n    if (options?.partials) {\n      for (const key in options.partials) {\n        this.definePartial(key, options.partials[key]);\n      }\n    }\n  }\n  /**\n   * Registers a helper function for use in templates.\n   *\n   * @param name The name of the helper function to register\n   * @param fn The helper function implementation\n   * @return This instance for method chaining\n   */\n  defineHelper(name, fn) {\n    this.handlebars.registerHelper(name, fn);\n    this.knownHelpers[name] = true;\n    return this;\n  }\n  /**\n   * Registers a partial template for use in other templates.\n   *\n   * @param name The name of the partial to register\n   * @param source The template source for the partial\n   * @return This instance for method chaining\n   */\n  definePartial(name, source) {\n    this.handlebars.registerPartial(name, source);\n    return this;\n  }\n  /**\n   * Registers a tool definition for use in prompts.\n   *\n   * @param def The tool definition to register\n   * @return This instance for method chaining\n   */\n  defineTool(def) {\n    this.tools[def.name] = def;\n    return this;\n  }\n  /**\n   * Parses a prompt template string into a structured ParsedPrompt object.\n   *\n   * @param source The template source string to parse\n   * @return A parsed prompt object with extracted metadata and template\n   */\n  parse(source) {\n    return parseDocument(source);\n  }\n  /**\n   * Renders a prompt template with the provided data.\n   *\n   * @param source The template source string to render\n   * @param data The data to use when rendering the template\n   * @param options Additional metadata and options for rendering\n   * @return A promise resolving to the rendered prompt\n   */\n  async render(source, data = {}, options) {\n    const renderer = await this.compile(source);\n    return renderer(data, options);\n  }\n  /**\n   * Processes schema definitions in picoschema format into standard JSON Schema.\n   *\n   * @param meta The prompt metadata containing schema definitions\n   * @return A promise resolving to the processed metadata with expanded schemas\n   */\n  async renderPicoschema(meta) {\n    if (!meta.output?.schema && !meta.input?.schema) {\n      return meta;\n    }\n    const newMeta = { ...meta };\n    if (meta.input?.schema) {\n      newMeta.input = {\n        ...meta.input,\n        schema: await picoschema(meta.input.schema, {\n          schemaResolver: this.wrappedSchemaResolver.bind(this)\n        })\n      };\n    }\n    if (meta.output?.schema) {\n      newMeta.output = {\n        ...meta.output,\n        schema: await picoschema(meta.output.schema, {\n          schemaResolver: this.wrappedSchemaResolver.bind(this)\n        })\n      };\n    }\n    return newMeta;\n  }\n  /**\n   * Resolves a schema name to its definition, using registered schemas or schema resolver.\n   *\n   * @param name The name of the schema to resolve\n   * @return A promise resolving to the schema definition or null if not found\n   */\n  async wrappedSchemaResolver(name) {\n    if (this.schemas[name]) {\n      return this.schemas[name];\n    }\n    if (this.schemaResolver) {\n      return await this.schemaResolver(name);\n    }\n    return null;\n  }\n  /**\n   * Merges multiple metadata objects together, resolving tools and schemas.\n   *\n   * @param base The base metadata object\n   * @param merges Additional metadata objects to merge into the base\n   * @return A promise resolving to the merged and processed metadata\n   */\n  async resolveMetadata(base, ...merges) {\n    let out = { ...base };\n    for (let i = 0; i < merges.length; i++) {\n      if (!merges[i]) continue;\n      const config = out.config || {};\n      out = { ...out, ...merges[i] };\n      out.config = { ...config, ...merges[i]?.config || {} };\n    }\n    const { template: _, ...outWithoutTemplate } = out;\n    out = outWithoutTemplate;\n    out = removeUndefinedFields(out);\n    out = await this.resolveTools(out);\n    out = await this.renderPicoschema(out);\n    return out;\n  }\n  /**\n   * Resolves tool names to their definitions using registered tools or tool resolver.\n   *\n   * @param base The metadata containing tool references to resolve\n   * @return A promise resolving to metadata with resolved tool definitions\n   */\n  async resolveTools(base) {\n    const out = { ...base };\n    if (out.tools) {\n      const outTools = [];\n      out.toolDefs = out.toolDefs || [];\n      await Promise.all(\n        out.tools.map(async (toolName) => {\n          if (this.tools[toolName]) {\n            if (out.toolDefs) {\n              out.toolDefs.push(this.tools[toolName]);\n            }\n          } else if (this.toolResolver) {\n            const resolvedTool = await this.toolResolver(toolName);\n            if (!resolvedTool) {\n              throw new Error(\n                `Dotprompt: Unable to resolve tool '${toolName}' to a recognized tool definition.`\n              );\n            }\n            if (out.toolDefs) {\n              out.toolDefs.push(resolvedTool);\n            }\n          } else {\n            outTools.push(toolName);\n          }\n        })\n      );\n      out.tools = outTools;\n    }\n    return out;\n  }\n  /**\n   * Identifies all partial references in a template.\n   *\n   * @param template The template to scan for partial references\n   * @return A set of partial names referenced in the template\n   */\n  identifyPartials(template) {\n    const ast = this.handlebars.parse(template);\n    const partials = /* @__PURE__ */ new Set();\n    const visitor = new class extends this.handlebars.Visitor {\n      // Visit partial statements and add their names to our set.\n      PartialStatement(partial) {\n        if (partial && typeof partial === \"object\" && \"name\" in partial && partial.name && typeof partial.name === \"object\" && \"original\" in partial.name && typeof partial.name.original === \"string\") {\n          partials.add(partial.name.original);\n        }\n      }\n    }();\n    visitor.accept(ast);\n    return partials;\n  }\n  /**\n   * Resolves and registers all partials referenced in a template.\n   *\n   * @param template The template containing partial references\n   * @return A promise that resolves when all partials are registered\n   */\n  async resolvePartials(template) {\n    if (!this.partialResolver && !this.store) {\n      return;\n    }\n    const partials = this.identifyPartials(template);\n    await Promise.all(\n      Array.from(partials).map(async (name) => {\n        if (!this.handlebars.partials[name]) {\n          let content = null;\n          if (this.partialResolver) {\n            content = await this.partialResolver(name);\n          }\n          if (!content && this.store) {\n            const partial = await this.store.loadPartial(name);\n            content = partial?.source;\n          }\n          if (content) {\n            this.definePartial(name, content);\n            await this.resolvePartials(content);\n          }\n        }\n      })\n    );\n  }\n  /**\n   * Compiles a template into a reusable function for rendering prompts.\n   *\n   * @param source The template source or parsed prompt to compile\n   * @param additionalMetadata Additional metadata to include in the compiled template\n   * @return A promise resolving to a function for rendering the template\n   */\n  async compile(source, additionalMetadata) {\n    let parsedSource;\n    if (typeof source === \"string\") {\n      parsedSource = this.parse(source);\n    } else {\n      parsedSource = source;\n    }\n    if (additionalMetadata) {\n      parsedSource = { ...parsedSource, ...additionalMetadata };\n    }\n    await this.resolvePartials(parsedSource.template);\n    const renderString = this.handlebars.compile(\n      parsedSource.template,\n      {\n        knownHelpers: this.knownHelpers,\n        knownHelpersOnly: true,\n        noEscape: true\n      }\n    );\n    const renderFunc = async (data, options) => {\n      const { input, ...mergedMetadata } = await this.renderMetadata(parsedSource);\n      const renderedString = renderString(\n        { ...options?.input?.default || {}, ...data.input },\n        {\n          data: {\n            metadata: {\n              prompt: mergedMetadata,\n              docs: data.docs,\n              messages: data.messages\n            },\n            ...data.context || {}\n          }\n        }\n      );\n      return {\n        ...mergedMetadata,\n        messages: toMessages(renderedString, data)\n      };\n    };\n    renderFunc.prompt = parsedSource;\n    return renderFunc;\n  }\n  /**\n   * Processes and resolves all metadata for a prompt template.\n   *\n   * @param source The template source or parsed prompt\n   * @param additionalMetadata Additional metadata to include\n   * @return A promise resolving to the fully processed metadata\n   */\n  async renderMetadata(source, additionalMetadata) {\n    let parsedSource;\n    if (typeof source === \"string\") {\n      parsedSource = this.parse(source);\n    } else {\n      parsedSource = source;\n    }\n    const selectedModel = additionalMetadata?.model || parsedSource.model || this.defaultModel;\n    let modelConfig;\n    if (selectedModel && this.modelConfigs[selectedModel]) {\n      modelConfig = this.modelConfigs[selectedModel];\n    }\n    return this.resolveMetadata(\n      modelConfig ? { config: modelConfig } : {},\n      parsedSource,\n      additionalMetadata\n    );\n  }\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/dotprompt/dist/index.js\n");

/***/ })

};
;